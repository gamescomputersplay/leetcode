'''  https://leetcode.com/problems/path-with-minimum-effort/
'''

class Solution:
    def minimumEffortPath(self, heights):

        # matrix of efforts
        effort = [[None] * len(heights[0]) for _ in range(len(heights))]
        effort [0][0] = 0
        stack = [(0, 0)]

        # Flood fill with efforts
        while stack:
            x, y = stack.pop()
            for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
                new_x, new_y = x + dx, y + dy
                if 0 <= new_x < len(heights) and 0 <= new_y < len(heights[0]):
                    potential_effort = max(effort[x][y], abs(heights[x][y] - heights[new_x][new_y]))
                    if effort[new_x][new_y] is None or potential_effort < effort[new_x][new_y]:
                        effort[new_x][new_y] = potential_effort
                        stack.append((new_x, new_y))

        #print(effort)
        return effort[-1][-1]

def main():
    ''' Test minimumEffortPath
    '''
    solution = Solution()

    test_cases = [
        [[1,2,2],[3,8,2],[5,3,5]],
        [[1,2,3],[3,8,4],[5,3,5]],
        [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]],
        [[288,648,676,607,688,791,495,887,83,362,562,484,817,888,753,981,134,601,192,126,840,835,474,887,17,633,999,630,451,405,717,8,711,450,731,217,937,34,552,491,919,958,348,721,76],[374,14,532,703,326,307,983,17,185,626,129,662,353,722,499,861,612,953,387,253,927,297,192,137,801,436,499,248,160,352,954,340,514,830,760,780,177,258,179,337,104,41,983,979,850],[500,988,371,377,285,870,540,152,442,464,458,354,264,266,175,392,764,530,244,880,721,629,170,574,879,927,589,717,536,540,149,833,628,732,341,216,177,836,522,361,311,248,998,415,896],[445,803,938,601,139,114,612,688,181,271,391,404,529,970,945,345,886,221,190,691,153,288,547,225,454,9,338,240,220,172,785,993,904,518,894,608,446,861,87,799,454,792,519,959,562],[259,490,409,783,381,979,774,882,765,924,791,195,656,784,717,155,267,743,483,736,739,115,705,252,279,25,433,422,342,238,683,742,809,531,813,7,785,163,264,551,555,508,505,236,573],[248,366,521,769,953,934,721,179,369,610,701,356,693,680,764,487,370,403,734,673,849,489,291,1000,47,657,747,508,604,816,864,724,970,519,515,77,683,961,961,46,288,517,864,429,223],[151,880,23,443,143,473,107,559,449,605,803,490,971,254,895,350,15,300,831,556,248,755,285,963,932,797,205,594,240,444,678,449,232,580,76,996,659,613,64,301,766,132,738,929,297],[976,242,282,235,223,187,620,382,278,425,486,932,228,455,873,439,474,911,846,388,175,978,573,567,603,676,367,10,736,339,856,747,521,413,66,72,233,536,244,854,103,549,995,476,142],[115,76,628,863,506,184,696,291,830,214,341,750,893,387,695,478,581,563,317,805,759,302,911,844,245,915,106,132,480,21,944,856,971,616,545,731,524,922,687,722,931,790,529,367,300],[907,331,42,515,15,658,720,363,174,278,533,764,707,953,34,322,369,56,526,999,905,557,7,868,226,618,952,2,632,940,700,199,818,161,253,726,770,958,344,367,648,38,480,259,430],[875,635,752,931,428,224,228,623,195,565,150,88,646,349,979,577,144,382,718,93,768,56,979,843,304,503,215,617,184,518,296,254,115,665,481,870,883,311,554,625,470,56,14,857,334],[610,205,352,689,72,141,294,597,554,517,833,554,532,58,451,179,826,809,956,83,662,258,1,115,585,217,103,383,50,626,972,777,767,193,33,841,763,248,310,525,595,574,213,594,258],[904,175,893,262,778,522,686,678,846,601,87,892,258,446,280,959,785,87,527,327,789,784,279,566,522,167,498,377,152,250,501,624,838,231,513,52,143,474,227,217,565,668,316,986,802],[152,330,959,59,851,940,108,510,96,454,94,766,111,327,508,213,323,998,352,312,913,570,949,801,420,461,401,304,100,980,134,57,884,882,482,547,340,598,740,88,166,418,927,682,959],[444,90,774,256,354,738,736,24,17,618,304,290,215,111,597,769,855,41,109,147,811,244,181,583,563,250,889,786,500,701,561,541,861,299,220,296,403,740,530,670,642,863,286,913,778],[340,12,153,748,627,317,521,6,253,603,767,811,766,939,577,96,573,563,109,836,43,671,349,264,990,763,655,158,512,628,219,306,22,869,982,161,675,915,616,235,140,427,648,731,387],[917,302,888,743,206,777,933,888,42,285,817,518,602,9,935,291,608,454,883,471,782,279,202,71,760,772,881,679,142,662,305,802,784,518,546,466,787,356,502,151,426,247,51,288,190],[858,252,676,281,511,240,58,632,708,142,446,975,333,143,716,465,610,559,319,754,896,111,454,12,2,49,280,933,979,235,376,608,271,197,404,864,246,94,909,813,1,846,912,960,641],[666,1000,183,182,936,182,722,853,109,940,491,225,714,680,536,340,119,370,219,409,375,38,440,344,195,549,671,473,261,96,620,368,635,465,913,122,280,830,447,307,90,224,197,29,746],[566,109,875,121,411,831,130,39,67,437,515,579,149,29,363,6,334,140,696,776,506,447,579,472,637,441,657,866,830,577,98,198,257,698,633,788,394,642,698,302,398,257,744,523,172],[873,606,928,626,50,575,911,716,519,910,838,460,344,877,161,530,22,232,982,731,905,328,992,844,760,702,176,237,832,100,451,163,562,383,523,828,611,506,344,290,803,763,971,839,375],[128,867,806,932,816,477,249,339,801,56,709,288,381,943,97,897,725,463,524,791,300,4,490,383,760,790,770,948,527,733,123,306,135,218,799,662,725,784,426,17,608,963,245,654,352],[103,894,852,597,514,18,975,375,300,284,931,87,953,945,389,591,385,269,652,873,999,9,62,530,156,653,188,894,800,948,832,754,447,210,14,61,391,939,729,642,372,669,670,208,961],[445,248,618,813,494,477,452,261,743,851,844,683,98,910,539,7,888,229,906,523,933,247,302,423,915,792,140,32,318,463,288,170,813,997,235,239,987,241,17,68,773,104,409,505,864],[939,838,798,197,647,514,996,955,158,351,653,364,176,359,763,870,529,279,341,767,663,255,937,549,25,655,266,196,922,905,685,502,422,631,8,936,632,256,50,304,894,666,383,786,855],[276,161,101,474,560,894,930,239,493,355,912,879,83,263,482,46,759,334,152,84,808,440,416,826,367,460,211,28,857,581,142,151,66,377,851,946,599,525,822,41,556,296,554,891,530],[385,102,265,175,272,820,983,588,987,407,727,400,416,945,638,354,78,635,736,562,575,866,404,850,928,157,206,367,887,787,901,275,758,201,467,827,316,375,619,408,799,773,347,761,606],[613,955,469,835,602,220,919,694,815,283,630,893,282,783,980,233,626,762,902,38,2,976,702,831,292,652,845,794,59,984,440,739,319,339,479,593,703,116,507,569,892,799,314,736,546],[640,502,400,14,130,339,902,730,254,920,27,624,642,445,232,588,550,713,282,882,13,679,820,351,543,193,362,6,633,984,244,902,556,733,505,497,480,946,938,373,950,832,126,935,232],[672,324,635,13,734,882,801,122,914,977,637,989,184,202,151,481,364,132,905,899,551,988,766,932,686,197,502,427,341,415,886,887,301,224,688,127,408,5,929,198,968,383,955,642,290],[737,259,772,947,205,869,897,904,541,842,943,728,145,808,295,295,562,48,279,216,732,414,495,788,509,739,776,596,91,970,447,802,894,265,651,47,481,35,951,180,932,813,371,259,301],[186,734,428,592,937,689,32,60,481,584,957,82,471,714,46,600,757,786,363,178,396,95,670,947,714,157,677,296,570,191,865,100,664,234,377,791,553,882,935,963,675,35,45,928,791],[312,354,770,109,770,976,424,558,958,599,983,631,263,221,755,899,625,420,440,190,529,889,746,958,120,460,139,862,677,664,672,371,114,939,424,334,843,323,872,419,899,88,161,550,342],[829,984,756,604,75,325,50,642,139,58,964,715,1000,921,845,159,977,598,505,258,495,112,386,243,459,532,133,526,839,853,991,767,619,261,218,648,954,395,807,704,161,175,585,406,293],[59,249,342,151,207,906,228,863,190,838,165,952,453,84,93,76,492,138,637,662,840,328,631,989,458,943,831,501,900,410,152,286,915,138,907,253,248,625,271,632,952,583,161,296,41],[677,353,452,530,305,672,956,962,398,410,343,647,974,811,231,736,397,382,356,936,932,435,354,555,849,657,684,792,846,763,437,261,542,631,712,121,644,144,12,788,533,903,949,441,664],[951,207,273,752,625,897,937,424,380,78,916,919,781,128,83,984,145,335,418,748,462,999,225,192,568,33,566,31,248,118,870,579,307,994,525,129,621,841,344,670,576,364,703,565,274],[26,682,460,6,207,931,475,248,864,205,41,56,79,74,515,464,629,187,3,23,905,472,888,218,360,600,76,396,452,598,662,63,64,140,949,194,682,213,896,144,596,495,853,544,636],[884,151,897,892,62,538,20,378,426,447,978,70,578,535,738,390,660,969,442,607,761,162,639,549,795,482,971,540,142,308,414,955,604,826,186,387,19,272,321,251,976,520,614,639,347],[766,590,732,864,692,780,959,778,501,161,746,247,554,846,912,304,755,146,991,817,840,576,834,106,812,299,944,483,816,494,734,67,206,578,321,901,745,39,758,819,936,514,387,165,34],[271,465,51,128,121,795,382,415,484,649,33,952,997,800,687,784,26,28,437,90,574,955,773,543,883,897,477,939,543,421,922,990,996,432,25,832,453,401,52,449,601,985,539,28,601],[753,150,564,6,208,515,290,408,724,731,169,94,628,295,215,767,891,895,727,672,678,852,873,847,214,479,494,247,524,745,878,195,103,544,282,430,501,967,510,738,421,12,700,211,591],[937,970,951,23,916,946,809,290,118,912,654,515,89,454,848,298,200,39,283,243,231,603,184,375,328,846,220,699,785,512,720,233,481,853,953,341,241,349,696,360,300,981,102,190,101],[985,219,897,118,391,589,367,400,887,45,850,899,352,14,331,232,162,647,91,583,364,727,65,584,951,233,127,241,187,977,675,934,499,916,597,934,956,482,417,526,108,627,51,226,587],[801,446,535,53,423,680,179,810,396,52,501,897,844,771,104,423,33,621,859,602,905,665,451,567,605,704,56,296,562,248,645,222,17,30,372,6,230,192,147,971,535,401,791,583,687]],
    ]
    for heights in test_cases:
        result = solution.minimumEffortPath(heights)
        print(heights, result)

if __name__ == "__main__":
    main()
        